# -*- coding: utf-8 -*-
"""Untitled23.ipynb

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/1Yc-Zy-0nEdAhBE_Pph-7-tzq9pHjdy7F
"""

import pandas as pd
import numpy as np
import matplotlib.pyplot as plt
from sklearn.model_selection import train_test_split
from sklearn.preprocessing import MinMaxScaler

# Load your data (example: 'stock_data.csv')
data = pd.read_csv('WLTW_data.csv')
data.head()

# Preprocessing the data
# Convert the date column to datetime
data['date'] = pd.to_datetime(data['date'])
data.set_index('date', inplace=True)

# Select relevant columns
data = data[['close']]

# Scaling the data
scaler = MinMaxScaler(feature_range=(0, 1))
scaled_data = scaler.fit_transform(data)

# Creating the dataset
look_back = 60

def create_dataset(dataset, look_back=look_back):
    X, Y = [], []
    for i in range(len(dataset) - look_back - 1):
        X.append(dataset[i:(i + look_back), 0])
        Y.append(dataset[i + look_back, 0])
    return np.array(X), np.array(Y)

X, y = create_dataset(scaled_data)
X = np.reshape(X, (X.shape[0], X.shape[1], 1))

# Splitting the data into training and testing sets
X_train, X_test, y_train, y_test = train_test_split(X, y, test_size=0.2, random_state=42)

# Machine Learning Model
## Linear Regression Model
from sklearn.linear_model import LinearRegression

# Flatten the X for Linear Regression
X_train_lr = np.reshape(X_train, (X_train.shape[0], X_train.shape[1]))
X_test_lr = np.reshape(X_test, (X_test.shape[0], X_test.shape[1]))

# Train the model
lr_model = LinearRegression()
lr_model.fit(X_train_lr, y_train)

# Predict
lr_predictions = lr_model.predict(X_test_lr)

# Inverse scaling
lr_predictions = scaler.inverse_transform(lr_predictions.reshape(-1, 1))

# Deep Learning Model
## LSTM Model Evaluation

from tensorflow.keras.models import Sequential # type: ignore
from tensorflow.keras.layers import Dense, LSTM # type: ignore

# Build the LSTM model
model = Sequential()
model.add(LSTM(50, return_sequences=True, input_shape=(look_back, 1)))
model.add(LSTM(50, return_sequences=False))
model.add(Dense(25))
model.add(Dense(1))

# Compile the model
model.compile(optimizer='adam', loss='mean_squared_error')

# Train the model
model.fit(X_train, y_train, batch_size=1, epochs=1)

# Predict
predictions = model.predict(X_test)
predictions = scaler.inverse_transform(predictions)

# Evaluating Models
# Plotting Predictions
import pandas as pd
import matplotlib.pyplot as plt

# Ensure the 'valid' DataFrame is created properly and matches the length of predictions
valid = data[-len(predictions):]
valid['Predictions'] = predictions

plt.figure(figsize=(16, 8))
plt.title('Stock Price Prediction')
plt.xlabel('Date')
plt.ylabel('Close Price USD')
plt.plot(data['close'])
plt.plot(valid['close'])
plt.plot(valid['Predictions'])
plt.legend(['Train', 'Val', 'Predictions'], loc='lower right')
plt.show()

